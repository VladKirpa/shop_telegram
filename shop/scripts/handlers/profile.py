import telebot
import sqlite3
from shop.scripts.loader import bot
from shop.scripts.database import user_base
from telebot import types
from shop.scripts.utils.photo_loader import get_or_upload_photo_id
from shop.scripts.utils.crypto import check_crypto_payment, create_invoice
from shop.scripts.utils.payment_config import is_method_enabled, get_card_details, get_payment_config


def get_deals_info(user_id):
    
    conn = sqlite3.connect('shop.db')
    cursor = conn.cursor()

    cursor.execute('SELECT COUNT(*) FROM orders WHERE user_id=?', (user_id,))   
    deals_count = cursor.fetchone()[0]

    cursor.execute("SELECT SUM(price) FROM orders JOIN products ON orders.product_id = products.id WHERE user_id=?", (user_id,))
    deals_amount = cursor.fetchone()[0] or 0.0

    conn.close()

    return deals_amount, deals_count


@bot.message_handler(commands=['Profile üë§'])
def show_profile(message):
    profile_photo = get_or_upload_photo_id('shop/media/profile.png')

    mcid = message.chat.id
    user_id = message.from_user.id

    user_info = user_base.get_user(user_id)
    deals_amount, deals_count = get_deals_info(user_id)
    balance = user_info[2]
    

    markup = types.InlineKeyboardMarkup()
    button1 = types.InlineKeyboardButton('üí∏Top up Balanceüí∏', callback_data='üí∏Top up Balanceüí∏')
    button2 = types.InlineKeyboardButton('üìÇPurchase historyüìÇ', callback_data='üìÇPurchase historyüìÇ')
    button3 = types.InlineKeyboardButton('ü´ÇReferal programmü´Ç', callback_data='ü´ÇReferal programmü´Ç')
    button4 = types.InlineKeyboardButton('Change language', callback_data='Change language')
    markup.row(button1), markup.row(button2), markup.row(button3), markup.row(button4)
    
    bot.send_photo(
    mcid, profile_photo,
    caption=(
        f"‚ûñ‚ûñ‚ûñ‚ÑπÔ∏è‚ûñ‚ûñ‚ûñ\n"
        f"Your ID : {user_id}\n"
        f"Your balance : {balance}$\n"
        f"Deals : {deals_count}\n"
        f"Total spent : {deals_amount}$"
    ),
    reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == 'üí∏Top up Balanceüí∏')
def top_up_balance(call):
    method = get_payment_config()
    
    if method == "crypto":
        msg = bot.send_message(call.message.chat.id, "üíµ Enter amount in USD to top up:")
        bot.register_next_step_handler(msg, handle_amount_input)
    elif method == "card":
        card = get_card_details()
        if not card:
            bot.send_message(call.message.chat.id, "‚ùå Card payment temporarily unavailable.")
            return

        text = (
            f"üí≥ Send payment to:\n"
            f"Card: `{card['number']}`\n"
            f"Bank: `{card['bank']}`\n"
            f"Recipient: `{card['holder']}`\n\n"
            f"üì∏ Send screenshot as confirmation:"
        )
        msg = bot.send_message(call.message.chat.id, text, parse_mode="Markdown")
        bot.register_next_step_handler(msg, handle_card_screenshot)
    elif method == "none":
        bot.send_message(call.message.chat.id, "üí¨ This store doesn't support online payment.\nContact seller for instructions.")
    elif method == "both":
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton("Crypto", callback_data='crypto_topup'),
            types.InlineKeyboardButton("Card", callback_data='card_topup')
        )
        bot.send_message(call.message.chat.id, "üíµ Choose payment method:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == 'card_topup')
def card_topup(call):
    card = get_card_details()
    if not card:
        bot.send_message(call.message.chat.id, "‚ùå Card payment temporarily unavailable.")
        return

    text = (
        f"üí≥ Send payment to:\n"
        f"Card: `{card['number']}`\n"
        f"Bank: `{card['bank']}`\n"
        f"Recipient: `{card['holder']}`\n\n"
        f"üì∏ Send screenshot as confirmation:"
    )
    msg = bot.send_message(call.message.chat.id, text, parse_mode="Markdown")
    bot.register_next_step_handler(msg, handle_card_screenshot)

def handle_amount_input(message):
    try:
        amount = float(message.text)
        invoice_url = create_invoice(amount, payload=str(message.from_user.id))
        if invoice_url:
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üí∏ –û–ø–ª–∞—Ç–∏—Ç—å", url=invoice_url))
            markup.add(types.InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data="check_payment"))
            bot.send_message(message.chat.id, f"üíµ –°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞ —Å—É–º–º—É {amount}$", reply_markup=markup)
        else:
            bot.send_message(message.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—á—ë—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.")


@bot.callback_query_handler(func=lambda call: call.data == "check_payment")
def handle_check_payment(call):
    user_id = call.from_user.id
    amount = check_crypto_payment(user_id)

    if amount > 0:
        current_balance = user_base.get_user(user_id)[2]
        new_balance = current_balance + amount
        user_base.update_balance(user_id, new_balance)
        bot.send_message(user_id, f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\nüí∞ –í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance}$")
    else:
        bot.send_message(user_id, "‚ùå –ü–ª–∞—Ç—ë–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –ø–∞—Ä—É –º–∏–Ω—É—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


@bot.callback_query_handler(func=lambda call: call.data == 'card_topup')
def show_card_details(call):
    card = get_card_details()
    message_text = (
        f"üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:\n"
        f"–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: {card['number']}\n"
        f"–ë–∞–Ω–∫: {card['bank']}\n"
        f"–ü–æ–ª—É—á–∞—Ç–µ–ª—å: {card['receiver']}\n\n"
        "–ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã –≤ —ç—Ç–æ—Ç —á–∞—Ç."
    )
    bot.send_message(call.message.chat.id, message_text)

@bot.message_handler(content_types=["photo"])
def handle_card_payment_photo(message):
    if is_method_enabled("card"):
        from os import getenv
        admin_id = int(getenv("ADMIN_ID"))
        bot.forward_message(admin_id, message.chat.id, message.message_id)
        bot.reply_to(message, "üì® –°–∫—Ä–∏–Ω –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

def handle_card_screenshot(message):
    if not message.photo:
        bot.send_message(message.chat.id, "‚ùå Please send a valid screenshot (photo).")
        return

    photo_id = message.photo[-1].file_id

    conn = sqlite3.connect("shop.db")
    cursor = conn.cursor()
    cursor.execute("INSERT INTO card_payments (user_id, file_id, status) VALUES (?, ?, ?)", (message.from_user.id, photo_id, 'pending'))
    conn.commit()
    conn.close()

    bot.send_message(message.chat.id, "‚úÖ Screenshot received. We'll verify and update your balance soon.")
